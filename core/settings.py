"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p+_q_z*0x#ek2ag!r^d3v5-6gl2ae#ypvcgg*4a#-ce$gf=h&u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',

    # Custom apps
    'users',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Adds debug-related variables to the template context when rendering templates.
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom auth user
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    # Auth
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',    # stateless authentication, More secure than session-based auth for APIs, Tokens expire (unlike DRF's default TokenAuthentication)
    ),

    # Permission applied for all endpoints initially.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',   # Default lock-down: all endpoints require authentication. will be overriden per-view as we needed
    ],

    # Pagination, reduces payload size to ensure better client-side performance
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',   # Simple and suitable for small dataset (<10K records). also when ordering isnâ€™t unique
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination', # stable, efficient, and high-performance pagination for large, frequently updated datasets (Real-time data) - (ordering is unique and consistent)
    'PAGE_SIZE': 10,
    
    # Basic Rate Limiting (Throttling). prevents server overload, brute force attacks and API abuses.
    'DEFAULT_THROTTLE_CLASSES': [
    'rest_framework.throttling.AnonRateThrottle',   # Unauthenticated user
    'rest_framework.throttling.UserRateThrottle'    # Authenticated user
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',  # 100 req per day for unauthenticated user
        'user': '1000/day'  # 1000 req per day for authenticated user
    },

        
    # Filtering, reduces database load, applied sequentially in the order defined
    'DEFAULT_FILTER_BACKENDS': [    
        'django_filters.rest_framework.DjangoFilterBackend',    # Exact field matches/filtering - (fast)
        'rest_framework.filters.SearchFilter',  # Full-text search in fields - (slower)
        'rest_framework.filters.OrderingFilter',    # Sorts/orders the results
    ],
}


# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),     # Short-lived access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Long-lived refresh token
    'ROTATE_REFRESH_TOKENS': True,      # New refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': True,   # Invalidate old refresh tokens

    'UPDATE_LAST_LOGIN': True,      # Update last login timestamp when refreshing token

    'ALGORITHM': 'HS256',   # The algorithm used to sign the JWT. HS256 (HMAC with SHA-256) - symmetric (Uses the same key for signing and verification)
    'SIGNING_KEY': SECRET_KEY,    # The key used to sign the JWT (e.g. Django's SECRET_KEY)
    'VERIFYING_KEY': None,  # For asymmetric algorithms, the public key used for verification

    'AUTH_HEADER_TYPES': ('Bearer',),   # Specifies acceptable authorization header prefixes. e.g. 'Bearer', 'JWT', 'Token'

    'USER_ID_FIELD': 'id',      # The field (unique) in the User model that identifies the user
    'USER_ID_CLAIM': 'user_id', # The claim name in the JWT payload that stores the user identifier

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), # Token classes that SimpleJWT will handle
    'TOKEN_TYPE_CLAIM': 'token_type',   # Name of the claim that stores the token type (helps differentiate between access and refresh tokens)
}
